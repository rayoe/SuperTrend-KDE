//@version=5
indicator("SuperTrend KDE (PDF-based Signals)", shorttitle="ST_KDE_PDF_Signals", overlay=true)



// --- SuperTrend Settings
factorInput = input.float(2.0, title="SuperTrend Factor", group="SuperTrend Settings", tooltip="Multiplier for the ATR to determine the distance between the price and the SuperTrend line.")
atrLengthInput = input.int(10, title="ATR Length", group="SuperTrend Settings", tooltip="The number of bars used to calculate the Average True Range (ATR) for the SuperTrend.")

// --- KDE Parameters
bandwidthInput = input.float(0.05, title="Bandwidth", group="KDE", minval=0.0001, tooltip="Set appropriate bandwidth for your asset's price scale (e.g., 0.005 for EUR/USD).")
stepsInput = input.int(100, title="Bins", group="KDE", minval=1, tooltip="The number of elements the KDE Probability array will have. Higher settings will result in greater precision.")
kernelInput = input.string("Gaussian", title="Kernel", options=["Gaussian","Uniform","Sigmoid"], group="KDE", tooltip="The kernel function for KDE calculation.")

// --- Pivot Settings
pivotLimit = input.int(300, title="Max Pivot Storage", group="KDE", tooltip="Maximum number of pivots to store.")
rollingWindowBars = input.int(300, title="Rolling Window (bars)", group="KDE", tooltip="Number of bars to keep recent pivots.")

// --- Signal Thresholds
ActivationThresholdInput = input.float(60, title="Activation Threshold %", maxval=100, group="Signal", tooltip="Relative density threshold for triggering buy/sell signals.")
StrongSignalThresholdInput = input.float(90, title="Strong Signal Threshold %", maxval=100, group="Signal", tooltip="Relative density threshold for triggering strong buy/sell signals.")

// --- Style Settings
densityPercentage = input.bool(true, title="Show Density %", group="Style", tooltip="Display the density percentage on the chart.")
transparencyInput1 = input.int(20, title="Transparency 1", maxval=100, minval=0, group="Style", tooltip="Transparency level for SuperTrend lines.")
transparencyInput2 = input.int(98, title="Transparency 2", maxval=100, minval=0, group="Style", tooltip="Transparency level for fill areas.")
bullishcolorInput = input.color(color.new(color.green, 0), title="Bullish Color", group="Style")
bearishcolorInput = input.color(color.new(color.red, 0), title="Bearish Color", group="Style")
textColorInput = input.color(color.white, title="Text Color", group="Style")

SuperTrend(factor, atrVal) =>
    upperBand = close + factor * atrVal
    lowerBand = close - factor * atrVal
    prevUpperBand = nz(upperBand[1])
    prevLowerBand = nz(lowerBand[1])
    
    lowerBand := (lowerBand > prevLowerBand or close[1] < prevLowerBand) ? lowerBand : prevLowerBand
    upperBand := (upperBand < prevUpperBand or close[1] > prevUpperBand) ? upperBand : prevUpperBand
    
    int direction = na
    float stVal = na
    prevSuperTrend = nz(stVal[1], upperBand)
    
    if na(stVal[1])
        direction := 1
    else if prevSuperTrend == prevUpperBand
        direction := close > upperBand ? -1 : 1
    else
        direction := close < lowerBand ? 1 : -1
    
    stVal := direction == -1 ? lowerBand : upperBand
    directionChange = (direction != direction[1])
    
    [stVal, direction, directionChange]


f_kernel(z, kernelType, bw) =>
    if kernelType == "Gaussian"
        1.0 / math.sqrt(2.0 * math.pi) * math.pow(math.e, -0.5 * math.pow(z / bw, 2.0))
    else if kernelType == "Uniform"
        math.abs(z / bw) <= 1 ? 0.5 / bw : 0.0
    else if kernelType == "Sigmoid"
        // Sigmoid kernel needs to be properly normalized
        2.0 / math.pi * (1.0 / (1 + math.exp(-z / bw)) - 0.5)
    else
        0.0

f_kdePDF(arr, kernelType, bw, nSteps) =>
    n = array.size(arr)

    arrSize = arr.size()
    arrRange = arr.range()
    arrMin = arr.min()
    stepCount = arrRange / nSteps
    
    densityRange = array.new<float>(nSteps * 2)
    for i = 0 to (nSteps * 2) - 1
        densityRange.set(i, arrMin + i * stepCount)
    
    xArr = array.new<float>()
    pdfArr = array.new<float>()
    for i = 0 to densityRange.size() - 1
        float temp = 0
        for j = 0 to arr.size() - 1
            temp += f_kernel(densityRange.get(i) - arr.get(j), kernelType, 1.0 / bw)

        
        xArr.push(densityRange.get(i))
        pdfArr.push(1.0 / arrSize * temp)
    
    [xArr, pdfArr]

f_getPDF(xArr, pdfArr, val) =>
    if array.size(xArr) == 0 or array.size(pdfArr) == 0
        na
    else
        closestDiff = 1e10
        closestIdx = 0
        for i = 0 to array.size(xArr) - 1
            diff = math.abs(array.get(xArr, i) - val)
            if diff < closestDiff
                closestDiff := diff
                closestIdx := i
        array.get(pdfArr, closestIdx)

var float upProbabilityRatio = na
var float dnProbabilityRatio = na


atr = ta.atr(atrLengthInput)
[superTrend, direction, directionChange] = SuperTrend(factorInput, atr)


pivotUp = directionChange and direction == -1
pivotDown = directionChange and direction == 1

// Initialize pivot arrays
var float[] upPivots = array.new_float()
var float[] downPivots = array.new_float()
var int[] upPivotBars = array.new_int()
var int[] downPivotBars = array.new_int()

// Rolling window cleanup function
f_rollingWindowCleanup(pivotArr, barArr, maxAgeBars) =>
    idx = 0
    while idx < array.size(barArr)
        if (bar_index - array.get(barArr, idx)) > maxAgeBars
            array.remove(barArr, idx)
            array.remove(pivotArr, idx)
        else
            idx += 1

// Store pivots and apply rolling window cleanup
if pivotUp
    if array.size(upPivots) >= pivotLimit
        array.remove(upPivots, 0)
        array.remove(upPivotBars, 0)
    array.push(upPivots, close)
    array.push(upPivotBars, bar_index)
    f_rollingWindowCleanup(upPivots, upPivotBars, rollingWindowBars)

if pivotDown
    if array.size(downPivots) >= pivotLimit
        array.remove(downPivots, 0)
        array.remove(downPivotBars, 0)
    array.push(downPivots, close)
    array.push(downPivotBars, bar_index)
    f_rollingWindowCleanup(downPivots, downPivotBars, rollingWindowBars)

if array.size(upPivots) >= 3
    [localXUp, localPdfUp] = f_kdePDF(upPivots, kernelInput, bandwidthInput, stepsInput)
    if array.size(localXUp) > 0 and array.size(localPdfUp) > 0
        currentPDF = f_getPDF(localXUp, localPdfUp, close)
        maxPDF = array.max(localPdfUp)
        if (maxPDF > 0) and not na(currentPDF)
            upProbabilityRatio := currentPDF / maxPDF
        else
            upProbabilityRatio := na

if array.size(downPivots) >= 3
    [localXDn, localPdfDn] = f_kdePDF(downPivots, kernelInput, bandwidthInput, stepsInput)
    if array.size(localXDn) > 0 and array.size(localPdfDn) > 0
        currentPDF = f_getPDF(localXDn, localPdfDn, close)
        maxPDF = array.max(localPdfDn)
        if (maxPDF > 0) and not na(currentPDF)
            dnProbabilityRatio := currentPDF / maxPDF
        else
            dnProbabilityRatio := na
sellSignal = false
strongSellSignal = false
buySignal = false
strongBuySignal = false

if pivotUp and not na(upProbabilityRatio)
    sellThreshold = ActivationThresholdInput / 100.0
    strongThreshold = StrongSignalThresholdInput / 100.0
    if upProbabilityRatio > strongThreshold
        strongBuySignal := true
    else if upProbabilityRatio > sellThreshold
        buySignal := true

if pivotDown and not na(dnProbabilityRatio)
    buyThreshold = ActivationThresholdInput / 100.0
    strongThreshold = StrongSignalThresholdInput / 100.0
    if dnProbabilityRatio > strongThreshold
        strongSellSignal := true
    else if dnProbabilityRatio > buyThreshold
        sellSignal := true



plot(upProbabilityRatio, title="Up Probability Ratio", precision = 4, color=color.blue, linewidth=1)
plot(dnProbabilityRatio, title="Down Probability Ratio",precision = 4,  color=color.orange, linewidth=1)

upTrend = plot(direction == -1 ? superTrend : na, color = color.new(bullishcolorInput, transparencyInput1), style=plot.style_linebr, title="UpTrend Line")
downTrend = plot(direction == 1 ? superTrend : na, color = color.new(bearishcolorInput, transparencyInput1), style=plot.style_linebr, title="DownTrend Line")

bodyMiddle = plot((open + close) / 2, display=display.none, title="Candle Body Middle")

fill(bodyMiddle, upTrend, (open + close) / 2, superTrend, color.new(bullishcolorInput, transparencyInput2), color.new(bullishcolorInput, transparencyInput1))
fill(bodyMiddle, downTrend, superTrend, (open + close) / 2, color.new(bearishcolorInput, transparencyInput1), color.new(bearishcolorInput, transparencyInput2))

plotshape(buySignal,  style=shape.labelup, location=location.belowbar,  color=bullishcolorInput,text="▲" , textcolor = chart.fg_color, size=size.small, title="Buy Signal")
plotshape(sellSignal, style=shape.labeldown, location=location.abovebar, color=bearishcolorInput,text="▼" , textcolor = chart.fg_color ,size=size.small, title="Sell Signal")

plotshape(strongBuySignal,  style=shape.labelup, location=location.belowbar,  color=bullishcolorInput,text="▲+" , textcolor = chart.fg_color, size=size.small, title="Strong Buy Signal")
plotshape(strongSellSignal, style=shape.labeldown, location=location.abovebar, color=bearishcolorInput,text="▼+" , textcolor = chart.fg_color ,size=size.small, title="Strong Sell Signal")

string probabilityTextBear = str.tostring(dnProbabilityRatio*100, "#.#") + "%"
string probabilityTextBull = str.tostring(upProbabilityRatio*100, "#.#") + "%"

if densityPercentage == true
    if buySignal or strongBuySignal
        label.new(bar_index, low, probabilityTextBull, color=color.new(bullishcolorInput, 100), style=label.style_label_up, textcolor=textColorInput, textalign=text.align_center, size = size.large, force_overlay=true, yloc = yloc.belowbar)
    else if sellSignal or strongSellSignal
        label.new(bar_index, high, probabilityTextBear, color=color.new(bullishcolorInput, 100), style=label.style_label_down, textcolor=textColorInput, textalign=text.align_center, size = size.large, force_overlay=true, yloc = yloc.abovebar)